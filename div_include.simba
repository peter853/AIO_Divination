{$include_once SRL-6/SRL.simba}
{$include_once sps/lib/sps-rs3.simba}
type
  TRS_divAIOInfo = record
    map_name, wisp_name: string;
    wisp_color, rift_color, _wXP, _ewXP: integer;
    _eXP, _mXP: array [1..3] of extended;
    rift_point: TPoint;
    POIs: TPointArray;
  end;

type
  TRS_divAIOInfoArray = array of TRS_divAIOInfo;

type
  TRS_div_info = record
    div_AIOInfo: TRS_divAIOInfo;
    area_map: TSPSArea;
  end;


var
  div_info_array: TRS_divAIOInfoArray;
  div_info: TRS_div_info;
  _PLAYER_POS_GLOBAL: TPoint;
  a1_t, a2_t, a3_t, a4_t, _PLAYER_POS_TIMER: integer;


const
  ANTIBAN_BRIEF = 0;
  ANTIBAN_SHORT = 1;
  ANTIBAN_MED   = 2;
  ANTIBAN_LONG  = 3;


procedure TRS_divAIOInfoArray.__init();
begin
  setLength(self, 12);
  with self[0] do
  begin
    map_name := 'pale_wisps';
    wisp_name := 'Pale';
    rift_color := 16535488;
    wisp_color := 8948320;
    rift_point := [188, 170];
    POIs := [[160, 160], [162, 137], [172, 135]];
    _mXP[1] := 1;
    _mXP[2] := 3;
    _mXP[3] := 3.5;
    _eXP[1] := 1;
    _eXP[2] := 3;
    _eXP[3] := 3.5;
    _wXP := 1;
    _ewXP := 1;
  end;
  with self[1] do
  begin
    map_name := 'flickering_wisps';
    wisp_name := 'Flickering';
    rift_color := 8782912;
    wisp_color := 8689518;
    rift_point := [165, 167];
    POIs := [[168, 142], [144, 149], [145, 126]];
    _mXP[1] := 1;
    _mXP[2] := 4;
    _mXP[3] := 5;
    _eXP[1] := 0;
    _eXP[2] := 8;
    _eXP[3] := 10;
    _wXP := 2;
    _ewXP := 4;
  end;
  with self[2] do
  begin
    map_name := 'bright_wisps';
    wisp_name := 'Bright';
    rift_color := 16649903;
    wisp_color := 14271127;
    rift_point := [112,	218];
    POIs := [[97,	234], [88,	199], [112,	195]];
    _mXP[1] := 1;
    _mXP[2] := 5;
    _mXP[3] := 6.2;
    _eXP[1] := 0;
    _eXP[2] := 10;
    _eXP[3] := 12.5;
    _wXP := 3;
    _ewXP := 6;
  end;
  with self[3] do
  begin
    map_name := 'glowing_wisps';
    wisp_name := 'Glowing';
    rift_color := 8782912;
    wisp_color := 10921347;
    rift_point := [172, 167];
    POIs := [[155, 165], [201, 154], [214, 138]];
    _mXP[1] := 1;
    _mXP[2] := 7;
    _mXP[3] := 8.7;
    _eXP[1] := 0;
    _eXP[2] := 14;
    _eXP[3] := 17.5;
    _wXP := 4;
    _ewXP := 8;
  end;
  with self[4] do
  begin
    map_name := 'sparkling_wisps';
    wisp_name := 'Sparkling';
    rift_color := 0;
    wisp_color := 10066032;
    rift_point := [175, 158];
    POIs := [[175, 192], [198, 190], [192, 167]];
    _mXP[1] := 1;
    _mXP[2] := 12;
    _mXP[3] := 15;
    _eXP[1] := 0;
    _eXP[2] := 24;
    _eXP[3] := 30;
    _wXP := 5;
    _ewXP := 10;
  end;
  with self[5] do
  begin
    map_name := 'gleaming_wisps';
    wisp_name := 'Gleaming';
    rift_color := 2655657;
    wisp_color := 7828034;
    rift_point := [172,217];
    POIs := [[126, 199], [141,	171], [105,	152]];
    _mXP[1] := 1;
    _mXP[2] := 19;
    _mXP[3] := 23.7;
    _eXP[1] := 0;
    _eXP[2] := 38;
    _eXP[3] := 47.5;
    _wXP := 6;
    _ewXP := 12;
  end;
  with self[6] do
  begin
    map_name := 'vibrant_wisps';
    wisp_name := 'Vibrant';
    rift_color := 2591146;
    wisp_color := 12169852;
    rift_point := [249, 168];
    POIs := [[248,	205], [200,	200], [229,	142]];
    _mXP[1] := 1;
    _mXP[2] := 25;
    _mXP[3] := 31.25;
    _eXP[1] := 0;
    _eXP[2] := 50;
    _eXP[3] := 62.5;
    _wXP := 7;
    _ewXP := 14;
  end;
  with self[7] do
  begin
    map_name := 'lustrous_wisps';
    wisp_name := 'Lustrous';
    rift_color := 2394284;
    wisp_color := 12169852;
    rift_point := [171,	144];
    POIs := [[180, 172], [148, 179], [135, 142]];
    _mXP[1] := 1;
    _mXP[2] := 32;
    _mXP[3] := 40;
    _eXP[1] := 0;
    _eXP[2] := 64;
    _eXP[3] := 80;
    _wXP := 8;
    _ewXP := 16;
  end;
  with self[8] do
  begin
    map_name := 'brilliant_wisps';
    wisp_name := 'Brilliant';
    rift_color := 11276136;
    wisp_color := 10391630;
    rift_point := [153, 224];
    POIs := [[123, 197], [121,169], [141, 159]];
    _mXP[1] := 1;
    _mXP[2] := 35;
    _mXP[3] := 43.7;
    _eXP[1] := 0;
    _eXP[2] := 70;
    _eXP[3] := 87.5;
    _wXP := 9;
    _ewXP := 18;
  end;
  with self[9] do
  begin
    map_name := 'radiant_wisps';
    wisp_name := 'Radiant';
    rift_color := 0;
    rift_point := [136, 144];
    POIs := [[119, 125], [153, 116], [170, 134]];
    wisp_color := 0;
    _mXP[1] := 1;
    _mXP[2] := 38;
    _mXP[3] := 47.5;
    _eXP[1] := 0;
    _eXP[2] := 76;
    _eXP[3] := 95;
    _wXP := 10;
    _ewXP := 20;
  end;
  with self[10] do
  begin
    map_name := 'luminous_wisps';
    wisp_name := 'Luminous';
    rift_color := 0;
    rift_point := [195, 153];
    POIs := [[167, 172], [168, 131], [193, 123]];
    wisp_color := 0;
    _mXP[1] := 1;
    _mXP[2] := 42;
    _mXP[3] := 52.5;
    _eXP[1] := 0;
    _eXP[2] := 84;
    _eXP[3] := 105;
    _wXP := 11;
    _ewXP := 22;
  end;
  with self[11] do
  begin
    map_name := 'incandescent_wisps';
    wisp_name := 'Incandescent';
    rift_point := [106, 171];
    rift_color := 0;
    POIs := [[123, 148], [86, 129], [73, 118]];
    wisp_color := 0;
    _mXP[1] := 1;
    _mXP[2] := 45;
    _mXP[3] := 56.2;
    _eXP[1] := 0;
    _eXP[2] := 90;
    _eXP[3] := 112.5;
    _wXP := 12;
    _ewXP := 24;
  end;
end;

function TSPSArea.getPlayerPos(): TPoint; override;
var
  foundMatches, wid, hei, t: integer;
  bmp: TMufasaBitmap;
  map: T3DIntegerArray;
  p: TPoint;
  searches, a: extended;
const
  sleep_time = 200;
begin
  if ((_PLAYER_POS_TIMER + sleep_time) > getSystemTime) then
    exit(_PLAYER_POS_GLOBAL);
  result := [-1, -1];

  if (not isLoggedIn()) then
    exit();

  if (not self.isSetup) then
  begin
    print('Unable to get players postion, sps isn''t setup', TDebug.ERROR);
    exit();
  end;

  t := getSystemTime();
  a := minimap.getAngleDegrees();

  if (inRange(a, 13.0, 347.0)) then
  begin
    print(self.getName()+'.getPlayerPos(): Angle is at '+floatToStr(a)+', Setting angle to 0 degrees');
    minimap.clickCompass();
    mainScreen.setAngle(MS_ANGLE_HIGH);
  end;

  bmp := SPS_GatherMinimap(spsAnyAngle, a);

  wid := bmp.getWidth();
  hei := bmp.getHeight();

  SPS_BitmapToMap(bmp, self._accuracy, map);

  if (length(map) > 0) then
  begin
    foundMatches := SPS_FindMapInMap(p.x, p.y, self.__areaMap, map, self._tolerance);
    searches := ((wid / self._accuracy) * (hei / self._accuracy));

    if ((foundMatches / searches) > self._minMatchPercent) then
    begin
      result.x := (p.x * self._accuracy + (wid div 2));
      result.y := (p.y * self._accuracy + (wid div 2));
      _PLAYER_POS_GLOBAL := result;
      _PLAYER_POS_TIMER := getSystemTime;
    end else
      print(self.getName()+'.getPlayerPos(): Didn''t find enough matches accurately calc your postion', TDebug.WARNING);
  end;

  bmp.free();

  print(self.getName()+'.getPlayerPos(): result = ' + toStr(result) + ', took ' + intToStr(getSystemTime() - t) + ' ms');
end;

procedure TSPSArea.setup(imgName, imgFolder: string; accuracy: integer; tolerance, minMatchPercent: extended); override;
var
  bmp: TMufasaBitmap;
  t: integer;
  m: extended;
begin
  print('Start custom SPS setup.');
  print(self.getName()+'.init()', TDebug.HEADER);

  t := getSystemTime();

  if (fileExists(imgFolder + imgName+'.png')) then
  begin
    print('Path exists ('+imgFolder + imgName+'.png)');

    self._accuracy := accuracy;
    self._tolerance := tolerance;
    self._minMatchPercent := minMatchPercent;
    self.__mapPath := imgFolder + imgName + '.png';

    try
      bmp.init(client.getMBitmaps());
      bmp.loadFromFile(self.__mapPath);

      SPS_BitmapToMap(bmp, self._accuracy, self.__areaMap);
    except
      print(self.getName()+'.setup(): Unable to load map or bitmap to map failed', TDebug.FATAL);
    finally
      bmp.free();
    end;

    self.isSetup := true;
  end else
    print(self.getName()+'.setup(): Unable to find map, searched path '+imgFolder + imgName+'.png', TDebug.FATAL);

  print('Setup area "' + imgName + '" in ' + intToStr(getSystemTime() - t) + 'ms');
  print(self.getName()+'.init()', TDebug.FOOTER);
  print('End custom SPS setup.');
end;

procedure _brief_antiban;
var
  burn_time: integer := getSystemTime + round(500*(gaussRangeExt(-1.3, 1.3)));
begin
  if a1_t > getSystemTime then exit;
  case random(4) of
    0: pickUpMouse();
    1: ;
    2: ;
    3: sleepAndMoveMouse(random(burn_time - getSystemTime));
  end;
  if (burn_time - getSystemTime) > 0 then wait(burn_time - getSystemTime);
  a1_t := getSystemTime + randomRange(10000, 30000);//10-30 seconds
end;

procedure _short_antiban;
var
  burn_time: integer := getSystemTime + round(3000*(gaussRangeExt(-1.3, 1.3)));
begin
  if a2_t > getSystemTime then exit;
  case random(4) of
    0: randomRClickItem();
    1: randomCameraAngle(MS_ANGLE_HIGH);
    2: randomCompass(10, 30, true);
    3: sleepAndMoveMouse(random(burn_time-getSystemTime));
  end;
  if (burn_time - getSystemTime) > 0 then wait(burn_time - getSystemTime);
  a2_t := getSystemTime + randomRange(180000, 600000);//3-10 minutes
end;

procedure _med_antiban;
var
  burn_time: integer := getSystemTime + round(6000*(gaussRangeExt(-1.3, 1.3)));
begin
  if a3_t > getSystemTime then exit;
  case random(4) of
    0: mouseMovingObject();
    1: boredHuman(true);
    2: mouseOffClient(random(5));
    3: sleepAndMoveMouse(random(burn_time-getSystemTime));
  end;
  if (burn_time - getSystemTime) > 0 then wait(burn_time - getSystemTime);
  a3_t := getSystemTime + randomRange(900000, 1200000);//15-20 minutes
end;

procedure _long_antiban();
var
  burn_time: integer := getSystemTime + round(10000*(gaussRangeExt(-1.3, 1.3)));
begin
  if a4_t > getSystemTime then exit;
  case random(4) of
    0: hoverRandomSkill();
    1: hoverSkill(SKILL_DIVINATION);
    2: mouseOffClient(random(5));
    3: sleepAndMoveMouse(random(burn_time-getSystemTime));
  end;
  if (burn_time - getSystemTime) > 0 then wait(burn_time - getSystemTime);
  a4_t := getSystemTime + randomRange(1200000, 2400000);//20-40 minutes
end;

procedure antiBan(length: integer = ANTIBAN_BRIEF);
var
  burn_time: integer := round(length*(gaussRangeExt(-1.3, 1.3)));
begin
  case burn_time of
    ANTIBAN_BRIEF: _brief_antiban;
    ANTIBAN_SHORT: _short_antiban;
    ANTIBAN_MED: _med_antiban;
    ANTIBAN_LONG: _long_antiban;
    else exit;
  end;
end;

procedure init_div_include(wisp: integer);
begin
  a1_t := getSystemTime + randomRange(0, 30000);//10-30 seconds
  a2_t := getSystemTime + randomRange(0, 600000);//3-10 minutes
  a3_t := getSystemTime + randomRange(0, 1200000);//15-20 minutes
  a4_t := getSystemTime + randomRange(0, 2400000);//20-40 minutes
  div_info_array.__init();
  div_info.div_AIOInfo := div_info_array[wisp];
  setLength(div_info_array, 0);
  div_info.area_map.setup(div_info.div_AIOInfo.map_name, 'maps\', 6, 550.0,
             0.4);
end;
