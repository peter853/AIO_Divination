{$include_once SRL-6/SRL.simba}
{$include_once sps/lib/sps-rs3.simba}
type
  TRS_divAIOInfo = record
    map_name, wisp_name: string;
    wisp_color, rift_color, _wXP, _ewXP: integer;
    _eXP, _mXP: array [1..3] of extended;
    rift_point: TPoint;
    POIs: TPointArray;
  end;

type
  TRS_divAIOInfoArray = array of TRS_divAIOInfo;

type
  TRS_div_info = record
    div_AIOInfo: TRS_divAIOInfo;
    area_map: TSPSArea;
  end;


var
  div_info_array: TRS_divAIOInfoArray;
  div_info: TRS_div_info;
  _PLAYER_POS_GLOBAL: TPoint;
  _PLAYER_POS_TIMER: integer;

procedure TRS_divAIOInfoArray.__init();
begin
  setLength(self, 12);
  with self[0] do
  begin
    map_name := 'pale_wisps';
    wisp_name := 'Pale';
    rift_color := 16535488;
    wisp_color := 8948320;
    rift_point := [186, 162];
    POIs := [[166,	136], [167,	189], [196,	182]];
    _mXP[1] := 1;
    _mXP[2] := 3;
    _mXP[3] := 3.5;
    _eXP[1] := 1;
    _eXP[2] := 3;
    _eXP[3] := 3.5;
    _wXP := 1;
    _ewXP := 1;
  end;
  with self[1] do
  begin
    map_name := 'flickering_wisps';
    wisp_name := 'Flickering';
    rift_color := 8782912;
    wisp_color := 8689518;
    rift_point := [165, 167];
    POIs := [[168, 142], [144, 149], [145, 126]];
    _mXP[1] := 1;
    _mXP[2] := 4;
    _mXP[3] := 5;
    _eXP[1] := 0;
    _eXP[2] := 8;
    _eXP[3] := 10;
    _wXP := 2;
    _ewXP := 4;
  end;
  with self[2] do
  begin
    map_name := 'bright_wisps';
    wisp_name := 'Bright';
    rift_color := 16649903;
    wisp_color := 14271127;
    rift_point := [112,	218];
    POIs := [[97,	234], [88,	199], [112,	195]];
    _mXP[1] := 1;
    _mXP[2] := 5;
    _mXP[3] := 6.2;
    _eXP[1] := 0;
    _eXP[2] := 10;
    _eXP[3] := 12.5;
    _wXP := 3;
    _ewXP := 6;
  end;
  with self[3] do
  begin
    map_name := 'glowing_wisps';
    wisp_name := 'Glowing';
    rift_color := 8782912;
    wisp_color := 10921347;
    rift_point := [172, 167];
    POIs := [[155, 165], [201, 154], [214, 138]];
    _mXP[1] := 1;
    _mXP[2] := 7;
    _mXP[3] := 8.7;
    _eXP[1] := 0;
    _eXP[2] := 14;
    _eXP[3] := 17.5;
    _wXP := 4;
    _ewXP := 8;
  end;
  with self[4] do
  begin
    map_name := 'sparkling_wisps';
    wisp_name := 'Sparkling';
    rift_color := 0;
    wisp_color := 10066032;
    rift_point := [175, 158];
    POIs := [[175, 192], [198, 190], [192, 167]];
    _mXP[1] := 1;
    _mXP[2] := 12;
    _mXP[3] := 15;
    _eXP[1] := 0;
    _eXP[2] := 24;
    _eXP[3] := 30;
    _wXP := 5;
    _ewXP := 10;
  end;
  with self[5] do
  begin
    map_name := 'gleaming_wisps';
    wisp_name := 'Gleaming';
    rift_color := 2655657;
    wisp_color := 7828034;
    rift_point := [148,	156];
    POIs := [[121, 153], [101, 121], [119, 110]];
    _mXP[1] := 1;
    _mXP[2] := 19;
    _mXP[3] := 23.7;
    _eXP[1] := 0;
    _eXP[2] := 38;
    _eXP[3] := 47.5;
    _wXP := 6;
    _ewXP := 12;
  end;
  with self[6] do
  begin
    map_name := 'vibrant_wisps';
    wisp_name := 'Vibrant';
    rift_color := 2591146;
    wisp_color := 12169852;
    rift_point := [164, 141];
    POIs := [[133, 137], [160, 168], [196, 146]];
    _mXP[1] := 1;
    _mXP[2] := 25;
    _mXP[3] := 31.25;
    _eXP[1] := 0;
    _eXP[2] := 50;
    _eXP[3] := 62.5;
    _wXP := 7;
    _ewXP := 14;
  end;
  with self[7] do
  begin
    map_name := 'lustrous_wisps';
    wisp_name := 'Lustrous';
    rift_color := 2394284;
    wisp_color := 12169852;
    rift_point := [171,	144];
    POIs := [[180, 172], [148, 179], [135, 142]];
    _mXP[1] := 1;
    _mXP[2] := 32;
    _mXP[3] := 40;
    _eXP[1] := 0;
    _eXP[2] := 64;
    _eXP[3] := 80;
    _wXP := 8;
    _ewXP := 16;
  end;
  with self[8] do
  begin
    map_name := 'brilliant_wisps';
    wisp_name := 'Brilliant';
    rift_color := 11276136;
    wisp_color := 10391630;
    rift_point := [131,	207];
    POIs := [[106, 184], [115, 170], [107, 149]];
    _mXP[1] := 1;
    _mXP[2] := 35;
    _mXP[3] := 43.7;
    _eXP[1] := 0;
    _eXP[2] := 70;
    _eXP[3] := 87.5;
    _wXP := 9;
    _ewXP := 18;
  end;
  with self[9] do
  begin
    map_name := 'radiant_wisps';
    wisp_name := 'Radiant';
    rift_color := 0;
    rift_point := [136, 144];
    POIs := [[119, 125], [153, 116], [170, 134]];
    wisp_color := 0;
    _mXP[1] := 1;
    _mXP[2] := 38;
    _mXP[3] := 47.5;
    _eXP[1] := 0;
    _eXP[2] := 76;
    _eXP[3] := 95;
    _wXP := 10;
    _ewXP := 20;
  end;
  with self[10] do
  begin
    map_name := 'luminous_wisps';
    wisp_name := 'Luminous';
    rift_color := 0;
    rift_point := [195, 153];
    POIs := [[167, 172], [168, 131], [193, 123]];
    wisp_color := 0;
    _mXP[1] := 1;
    _mXP[2] := 42;
    _mXP[3] := 52.5;
    _eXP[1] := 0;
    _eXP[2] := 84;
    _eXP[3] := 105;
    _wXP := 11;
    _ewXP := 22;
  end;
  with self[11] do
  begin
    map_name := 'incandescent_wisps';
    wisp_name := 'Incandescent';
    rift_point := [106, 171];
    rift_color := 0;
    POIs := [[123, 148], [86, 129], [73, 118]];
    wisp_color := 0;
    _mXP[1] := 1;
    _mXP[2] := 45;
    _mXP[3] := 56.2;
    _eXP[1] := 0;
    _eXP[2] := 90;
    _eXP[3] := 112.5;
    _wXP := 12;
    _ewXP := 24;
  end;
end;

function TSPSArea.getPlayerPos(): TPoint; override;
var
  t, foundMatches, bmpW, bmpH: integer;
  bmpMinimap: TMufasaBitmap;
  smallMap: T3DIntegerArray;
  p: TPoint;
  searches: extended;
const
  sleep_time = 250;
begin
  if (_PLAYER_POS_TIMER + sleep_time) > getSystemTime then
    exit(_PLAYER_POS_GLOBAL);
  result := [-1, -1];

  if (not self.isSetup) then
  begin
    print('Unable to get players postion, sps isn''t setup', TDebug.ERROR);
    exit();
  end;

  if (not isLoggedIn()) then
    exit();

  t := getSystemTime();

  if (not spsAnyAngle) then
  begin
    if (inRange(minimap.getAngleDegrees(), 8, 352)) then
      minimap.setAngle(MM_DIRECTION_NORTH);

    bmpMinimap := SPS_GatherMinimap();
  end else
    bmpMinimap := SPS_GatherRotatedMinimap();

  bmpW := bmpMinimap.getWidth();
  bmpH := bmpMinimap.getHeight();

  SPS_BitmapToMap(bmpMinimap, self._accuracy, smallMap);

  foundMatches := SPS_FindMapInMap(p.x, p.y, self.__areaMap, smallMap, self._tolerance);
  searches := ((bmpW / self._accuracy) * (bmpH / self._accuracy));

  bmpMinimap.free();

  if ((foundMatches / searches) > self._minMatchPercent) then
  begin
    result.x := (p.x * self._accuracy + (bmpW div 2));
    result.y := (p.y * self._accuracy + (bmpW div 2));
    _PLAYER_POS_GLOBAL := result;
  end else
    print(self.getName()+'.getPlayerPos(): Didn''t find enough matches accurately calc your postion', TDebug.WARNING);

  print(self.getName()+'.getPlayerPos(): result = ' + toStr(result) + ' took ' + intToStr(getSystemTime() - t) + ' ms');
  print('Time since last .getPlayerPos() call: ' + toStr(getSystemTime-_PLAYER_POS_TIMER));
  _PLAYER_POS_TIMER := getSystemTime;
end;

procedure TSPSArea.setupCustom(imgName: string);
var
  tmb: TMufasaBitmap;
  path: string;
begin

  print('TSPSArea.init()', TDebug.HEADER);

  path := 'maps\' + imgName + '.png';

  if not(fileExists(path)) then
  begin
    print('Invalid map path...');
    terminateScript;
  end;

  self._accuracy := __DEFAULT_ACCURACY;
  self._tolerance := __DEFAULT_TOLERANCE;
  self._minMatchPercent := 0.5;
  self.__mapPath := path;

  if (spsAnyAngle) then
    self._minMatchPercent := 0.10;

  try
    tmb.init(client.getMBitmaps());
    tmb.loadFromFile(self.__mapPath);

    SPS_BitmapToMap(tmb, self._accuracy, self.__areaMap);
  except
    print(self.getName()+'.setup(): Unable to load map or bitmap to map failed', TDebug.FATAL);
  finally
    tmb.free();
  end;

  self.isSetup := true;

  print('Setup SPS area "' + imgName);
  print('TSPSArea.init()', TDebug.FOOTER);
end;

procedure init_div_include(wisp: integer);
begin
  div_info_array.__init();
  div_info.div_AIOInfo := div_info_array[wisp];
  setLength(div_info_array, 0);
  div_info.area_map.setupCustom(div_info.div_AIOInfo.map_name);;
end;
