program AIO_Divination;
{$DEFINE SMART}
{$I SRL-6/SRL.simba}
{$I sps/lib/sps-rs3.simba}
{$I div_include.simba}

var
  memoriesCon, eMemoriesCon, totalMem, totalEMem, cMod, rift_colorEX: integer;
  mmCenter: TPoint;
  msBounds, mmBounds: TBox;
  wisp_TPA: TPointArray;


const
  SIPHON_PALE_WISPS = 0;
  SIPHON_FLICKERING_WISPS = 1;
  SIPHON_BRIGHT_WISPS = 2;
  SIPHON_GLOWING_WISPS = 3;
  SIPHON_SPARKLING_WISPS = 4;
  SIPHON_GLEAMING_WISPS = 5;
  SIPHON_VIBRANT_WISPS = 6;
  SIPHON_LUSTROUS_WISPS = 7;
  SIPHON_BRILLIANT_WISPS = 8;
  SIPHON_RADIANT_WISPS = 9;
  SIPHON_LUMINOUS_WISPS = 10;
  SIPHON_INCANDESCENT_WISPS = 11;

  _debug = true;
procedure declarePlayers;
begin
  setLength(players, 1);
  with players[0] do
  begin
    integers[0] := 2;//1, 2 or 3 memory conversion options
    integers[1]  := SIPHON_BRILLIANT_WISPS;//wisp name
    booleans[0] := true;//Are you gaining %10 extra exp because of boon?
    loginName   := '';
    password    := '';
    isActive    := true;
    isMember    := true;
    world       := -1;
  end;
  currentPlayer := 0;
end;

procedure initInfo;
begin
  msBounds := mainscreen.getBounds;
  mmBounds := minimap.getBounds;
  mmCenter := minimap.getCenterPoint;
  init_div_include(players[currentPlayer].integers[1]);
  cMod := players[currentPlayer].integers[1];
end;

function TPointArray.centerPoint(): TPoint;
var
  tmpArray: TPointArray;
begin
  if length(self) < 1 then exit;
  tmpArray := self;
  tmpArray.sortFromPoint(self.getMiddle);
  result := tmpArray[0];
end;

function rn(rand: integer = 0): integer;
begin
  result := randomRange(-1*rand, rand);
end;

function riftMM2: TPoint;
begin
  if not SPS_PosToMM(div_info.div_AIOInfo.rift_point, div_info.area_map.getPlayerPos, result) then
    result := [0, 0];
end;

function validateRiftColor: boolean;
var
  tpa: TPointArray;
begin
  if findColors(tpa, rift_colorEX, minimap.getBounds) then
  begin
    FilterPointsPie(tpa, 0, 360, 0, 90, minimap.cx, minimap.cy);
    if inRange(length(tpa), 15, 36) then result := true;
  end else rift_colorEX := -1;
end;

function setRiftColor: boolean;
var
  r: TPoint;
  tpa: TPointArray;
  tia, cnt, unique: TIntegerArray;
  b: TBox;
  clr, i, h, j, h2: integer;
begin
  if (div_info.div_AIOInfo.rift_color = 0) then exit;
  if validateRiftColor then exit(true);
  r := riftMM2;
  if r.equals([0, 0]) then exit;
  b := intToBox(r.x-15, r.y-15, r.x+15, r.y+15);

  if findColorsTolerance(tpa, div_info.div_AIOInfo.rift_color, b, 15) then
  begin
    tia := getColors(tpa, false);
    h := high(tia);
    for i := 0 to h do
      if not inIntArray(unique, tia[i]) then insert(tia[i], unique)
  end;
  setLength(cnt, length(unique));
  h2 := high(unique);
  for i := 0 to h do
  begin
    for j := 0 to h2 do
    begin
      if tia[i] = unique[j] then inc(cnt[j]);
    end;
  end;
  for j := 0 to h2 do
  begin
    if inRange(cnt[j], 15, 36) then
    begin
      rift_colorEX := unique[j];
      exit(true)
    end;
  end;
end;

function riftMMEx: TPointArray;
var
  tpa: TPointArray;
begin
  if setRiftColor then if FindColors(tpa, rift_colorEX, mmBounds) then
    if inRange(length(tpa), 15, 36) then result := tpa;
end;

function riftMM: TPoint;
var
  tpa: TPointArray;
begin
  tpa := riftMMEx;
  if length(tpa) > 1 then result := tpa.centerPoint else result := riftMM2;
end;

function riftMS: T2DPointArray;
var
  rifty: TPointArray;
  ms_rift: TPoint;
  rifty2d: T2DPointArray;
  i, h: integer;
begin
  ms_rift := minimap.pointToMainscreen(riftMM);
  if ms_rift.equals([-1, -1]) then exit;
  if not findColorsTolerance(rifty, 8447955, msBounds, 31) then exit;
  rifty2d := rifty.toATPA(15, 15);
  rifty2d.sortBySize();
  h := high(rifty2d);

  for i := 0 to high(rifty2d) do
    if length(rifty2d[i]) > 15 then insert(rifty2d[i], result) else exit;
end;

procedure TPointArray.filterBox(b: TBox);
var
  i, h, c: integer;
begin
  h := high(self);
  c := 0;
  for i := 0 to h do
  begin
    if (self[i].x > b.x1) and (self[i].x < b.x2) and (self[i].y > b.y1) and (self[i].y < b.y2) then
      continue else
      begin
        self[c] := self[i];
        inc(c);
      end;
  end;
  setLength(self, c+1);
end;

procedure filterRiftMS(out tpa, tpa1: TPointArray);
var
  tempTPA: TPointArray;
  ms, ms2: TPoint;
  b: TBox;
begin
  if distance(mmCenter, riftMM) > 60 then exit;
  b := riftMMEx.getBounds;

  ms := minimap.pointToMainscreen(Point(b.x1, b.y1));
  ms2 := minimap.pointToMainscreen(Point(b.x2, b.y2));

  if ms.equals([-1, -1]) or ms2.equals([-1, -1]) then exit;

  b := intToBox(ms.x-35, ms.y-35, ms2.x+35, ms2.y+35);
  b.setLimit(mainscreen.getBounds);

  tpa.filterBox(b);
  tpa1.filterBox(b);
end;

function findWisps: T2DPointArray;
var
  lTPA, dTPA, tpa: TPointArray;
  lATPA: T2DPointArray;
  lBoxes: TBoxArray;
  i, h: integer;
begin
  if not findColorsTolerance(lTPA, 12305048, mainscreen.getBounds, 13, colorSetting(2, 0.95, 1.72)) then exit;
  if not findColorsTolerance(dTPA, 12305048, mainscreen.getBounds, 18, colorSetting(2, 0.27, 0.71)) then exit;
  if (div_info.div_AIOInfo.rift_color <> 0) then filterRiftMS(lTPA, dTPA);
  lATPA := lTPA.toATPA(5+cMod, 5+cMod);
  lBoxes := lATPA.getEachBounds;
  h := high(lBoxes);
  for i := 0 to h do
  begin
    tpa := dTPA.copy;
    lboxes[i].edit(-4, -4, 4, 4);
    tpa.filterPointsBox(lBoxes[i]);
    if length(tpa) > cMod then insert(lATPA[i], result);
  end;
end;

function findWisp: TPoint;
var
  splitWisps: T2DPointArray;
  MSCenter: TPoint = [285, 200];
begin
  result := [0, 0];
  splitWisps := findWisps;
  if length(splitWisps) < 1 then exit;
  splitWisps.sortFromMidPoint(MSCenter);
  result := splitWisps[0].centerPoint;
end;

function siphon: boolean;
var
  wisp: TPoint;
  i, threshold, speedMouse: integer;
begin
  threshold := getSystemTime + randomRange(200, 2000);
  result := tabBackpack.isFull;
  while (threshold > getSystemTime) do
  begin
    wait(randomRange(200, 400));
    if tabBackpack.isFull then exit(true);
    wisp := findWisp;
    if wisp.equals([0, 0]) then continue;
    speedMouse := mouseSpeed;
    mouseSpeed := mouseSpeed + randomRange(5, 15);
    mouse(wisp, MOUSE_RIGHT, MOUSE_HUMAN);
    mouseSpeed := speedMouse;
    if chooseOption.select(['Harvest '], randomRange(1500,3500)) then exit(true);
  end;
end;

function energyColorCount: integer;
begin
  result := countColor(65535, tabBackpack.getBounds);
end;

function moveToRift: boolean;
var
  rift_point: TPoint := riftMM;
begin
  if (riftMM.x > 0) then
  begin
    if (distance(mmCenter, riftMM) < 10) then exit(true);
    mouse(rift_point, MOUSE_LEFT);
    if minimap.isFlagPresent(randomRange(2000, 3500)) then
      if minimap.waitPlayerMoving() then
        result := (distance(mmCenter, riftMM) < 10);
  end;
  result := div_info.area_map.blindWalk(div_info.div_AIOInfo.rift_point);
end;

function moveToWisps: boolean;
var
  index: integer;
  tempPoint: TPoint;
begin
  tempPoint := findWisp;
  if tempPoint.equals([0, 0]) then
  begin
    index := randomRange(low(div_info.div_AIOInfo.POIs), high(div_info.div_AIOInfo.POIs));
    result := div_info.area_map.blindWalk(div_info.div_AIOInfo.POIs[index].rand(5));
  end else result := true;
end;

function exitSiphon: boolean
var
  spinPoint: TPoint;
begin
  if tabBackpack.isFull then exit(true);
  if findSpinTicket(spinPoint) then
      mouse(spinPoint.rand(rn(4)), Mouse_Left, Mouse_Human);
  if tabBackpack.isFull then exit(true);
  wait(randomRange(50, 100));
  if tabBackpack.isFull then exit(true);
  exitSquealOfFortune;
  wait(randomRange(50, 100));
  result := tabBackpack.isFull;
end;

procedure waitWhileSiphoning;
var
  threshold, invCount, yellowCount: integer;
begin
  threshold := getSystemTime + randomRange(3000,4000);
  invCount := tabBackpack.count;
  yellowCount := energyColorCount;
  while threshold > getSystemTime do
  begin
    status('Threshold: '+msToTime(threshold-getSystemTime, TIME_SHORT)+
      ' - Inv Count: ' + toStr(invCount));
    if exitSiphon then exit;
    wait(100);
    if (invCount <> tabBackpack.count) or (yellowCount <> energyColorCount) then
    begin
      threshold := getSystemTime + randomRange(1800,2800);
      invCount := tabBackpack.count;
      yellowCount := energyColorCount;
    end;
  end;
end;

function collectMemories: boolean;
var
  threshold, noWisps: integer;
begin
  //Will attempt to collect memories for 4.5 - 9.5 minutes
  threshold := getSystemTime + randomRange(270000,570000);
  result := tabBackpack.isFull;
  while (threshold > getSystemTime) and (not result) do
  begin
    result := tabBackpack.isFull;
    if siphon then
    begin
      noWisps := 0;
      if minimap.isFlagPresent(randomRange(1500, 3000)) then
      minimap.waitFlag();
      waitWhileSiphoning;
    end else if not moveToWisps then exit;
    wait(randomRange(100,200));
  end;
end;

procedure convertOption(i: integer = 0);
var
  box1: TBOX := [140, 167, 207, 233];
  box2: TBOX := [247, 164, 314, 234];
  box3: TBOX := [358, 167, 425, 233];
begin
  if (i = 0) then
    typeSend(toString(players[CurrentPlayer].integers[0]), false)
  else begin
    case players[CurrentPlayer].integers[0] of
      1: mouseBox(box1, MOUSE_Left);
      2: mouseBox(box2, MOUSE_Left);
      3: mouseBox(box3, MOUSE_Left);
      else begin
        print('Invalid conversion option.'+ toStr(players[CurrentPlayer].integers[0]));
        TerminateScript;
      end;
    end;
  end;
end;

function riftOpen: boolean
var
  searchArea: TBox := [203, 66, 370, 84];
const
  _white_color = 12378347;
begin
  result := inRange(countColor(_white_color, searchArea), 545, 555);
end;

function wait2Convert: boolean;
var
  threshold: integer := getSystemTime + randomRange(6000, 10000);
begin
  while (threshold > getSystemTime) and (not riftOpen) do
    wait(100);
  result := riftOpen;
  wait(randomRange(50, 100));
end;

procedure countMemories(var enriched, normal: integer);
var
  midColor, memSlots: TIntegerArray;
  grabPoint: TPoint;
  i, common, h: integer;
begin
  for i := 1 to 28 do
    if tabBackpack.isItemInSlot(i) and
      (countColor(65535, tabBackpack.getSlotBox(i)) < 1) then insert(i, memSlots);

  if length(memSlots) < 1 then exit;
  setLength(midColor, length(memSlots));
  enriched := 0;
  normal := 0;
  h := high(memSlots);
  for i := 0 to h do
  begin
    grabPoint := tabBackpack.getSlotBox(memSlots[i]).getMiddle;
    midColor[i] := getColor(grabPoint.x, grabPoint.y-9);
  end;
  common := midColor.getMostCommon;
  midColor.sortQuick;
  if (midcolor[0] = midColor[h]) then
  begin
    normal := length(memSlots);
    exit;
  end;
  for i := 0 to h do
    if (midColor[i] = common) then inc(normal) else inc(enriched);
end;

function countMemories: integer; overload;
var
  e, n: integer;
begin
  countMemories(e, n);
  result := e + n;
end;

function waitWhileConverting: boolean;
var
  inv: integer := tabBackpack.count;
  threshold: integer := getSystemTime + randomRange(45000,60000);
  t: integer := getSystemTime + randomRange(5000, 7000);
begin
  while (threshold > getSystemTime) and (countMemories > 0) and (t > getSystemTime)do
  begin
    status('Threshold: '+msToTime(threshold-getSystemTime, TIME_SHORT)+
      ' - Memories: ' + toStr(countMemories)+
      ' - inv timer: '+msToTime(t-getSystemTime, TIME_SHORT));
    wait(randomRange(100, 500));
    if tabBackpack.count <> inv then
    begin
      t := getSystemTime + randomRange(5000, 7000);
      inv := tabBackpack.count;
    end;
  end;
  result := tabBackpack.count < 28;
  if result then wait(randomRange(200, 500));
end;

procedure printProgress;
var
  secondsElapsed, expPHour, totalEXP, wispEXP, eWispEXP, memEXP, eMemEXP: extended;
begin
  incEx(totalMem, memoriesCon);
  incEx(totalEMem, eMemoriesCon);
  wispEXP := totalMem * div_info.div_AIOInfo._wXP;
  eWispEXP := totalEMem * div_info.div_AIOInfo._ewXP;
  memEXP := totalMem * div_info.div_AIOInfo._mXP[players[CurrentPlayer].integers[0]];
  eMemEXP := totalEMem * div_info.div_AIOInfo._eXP[players[CurrentPlayer].integers[0]];
  totalEXP := wispEXP + eWispEXP + memEXP + eMemEXP;

  //add to total exp if using boon
  if players[CurrentPlayer].booleans[0] then totalEXP := totalEXP * 1.1;

  secondsElapsed := (getTimeRunning/1000);
  expPHour := (totalEXP * 60 * 60) / secondsElapsed;

  smartImage.clearArea(IntToBox(400, 515, 555, 578));
  smartImage.drawBox(IntToBox(400, 515, 555, 578), true, clOrange);
  smartImage.DrawText('Run Time: ' + msToTime(GetTimeRunning, TIME_SHORT), Point(400, 515), upchars, false, 2102790);
  smartImage.DrawText('EXP/Hour: ' + toString(round(expPHour)), Point(400, 525), upchars, false, 2102790);
  smartImage.DrawText('Total EXP: ' + toString(totalEXP), Point(400, 535), upchars, false, 2102790);
  smartImage.DrawText('Enriched Memories: ' + toString(totalEMem), Point(400, 545), upchars, false, 2102790);
  smartImage.DrawText('Regular Memories: '+toString(totalMem), Point(400, 555), upchars, false, 2102790);
  smartImage.DrawText('Harvesting '+ div_info.div_AIOInfo.wisp_name + ' wisps ', Point(400, 565), upchars, false, 2102790);
end;

function openRift: boolean;
var
  threshold: integer := getSystemTime + randomRange(55000, 75000);
  MM_rift: TPoint;
  rift_ATPA: T2DPointArray;
  i: integer;
begin
  while (threshold > getSystemTime) do
  begin
    if riftOpen then exit(true);
    rift_ATPA := riftMS;
    if length(rift_ATPA) < 1 then
    begin
      moveToRift;
      wait(randomRange(100, 1000));
      continue;
    end;
    setLength(rift_ATPA, Min(high(rift_ATPA), randomRange(3, 6)));
    for i := 0 to high(rift_ATPA) do
    begin
      mouse(rift_ATPA[i].centerPoint, Mouse_right, Mouse_Human);
      if chooseOption.select(['Convert memories', 'memories En'], randomRange(3500,4500)) then
        exit(true);
      wait(random(100));
    end;
    moveToRift;
    wait(random(1000));
  end;
end;

function convertMemories: boolean;
var
  threshold, i, eM, m: integer;
begin
  countMemories(eMemoriesCon, memoriesCon);
  if openRift then
  begin
    if wait2Convert then
    begin
      wait(randomRange(50,200));
      threshold := getSystemTime + randomRange(6000,8000);
      while (threshold > getSystemTime) and riftOpen do
      begin
        convertOption(i);
        wait(randomRange(400, 800));
        inc(i);
      end;
    end;
    if (threshold > getSystemTime) and (not riftOpen) then
      result := waitWhileConverting;
    if result then
    begin
      countMemories(eM, m);
      eMemoriesCon := eMemoriesCon - eM;
      memoriesCon := memoriesCon - m;
      printProgress;
    end;
  end;
  memoriesCon := 0;
  eMemoriesCon := 0;
end;

procedure mainLoop;
begin
  if (not isLoggedIn) and players[currentPlayer].isActive then
  begin
    if players[currentPlayer].login then
    begin
      wait(randomRange(50, 2000));
      minimap.clickCompass;
      wait(randomRange(50, 2000));
      mainscreen.setAngle(MS_ANGLE_HIGH);
      wait(randomRange(10, 2000));
    end else if (players.getActive < 1) then terminateScript;
  end;

  if not collectMemories then exit;
  if not convertMemories then exit;
  wait(randomRange(100,200));
end;

begin
  smartEnableDrawing := true;
  setupSRL;
  declarePlayers;
  initInfo;
  while players.getActive > 0 do mainLoop;
end.
